// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FogAllocationService_ReportNodeState_FullMethodName         = "/thesis.FogAllocationService/ReportNodeState"
	FogAllocationService_AllocateTask_FullMethodName            = "/thesis.FogAllocationService/AllocateTask"
	FogAllocationService_ReportTaskOutcome_FullMethodName       = "/thesis.FogAllocationService/ReportTaskOutcome"
	FogAllocationService_GetSystemState_FullMethodName          = "/thesis.FogAllocationService/GetSystemState"
	FogAllocationService_ControlRLAgent_FullMethodName          = "/thesis.FogAllocationService/ControlRLAgent"
	FogAllocationService_GetRLAgentStatus_FullMethodName        = "/thesis.FogAllocationService/GetRLAgentStatus"
	FogAllocationService_GetRLPerformanceMetrics_FullMethodName = "/thesis.FogAllocationService/GetRLPerformanceMetrics"
	FogAllocationService_SetRLParameters_FullMethodName         = "/thesis.FogAllocationService/SetRLParameters"
)

// FogAllocationServiceClient is the client API for FogAllocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FogAllocationServiceClient interface {
	// Stream-based state updates from clients
	ReportNodeState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NodeStateRequest, NodeStateResponse], error)
	// Request task allocation decision
	AllocateTask(ctx context.Context, in *TaskAllocationRequest, opts ...grpc.CallOption) (*TaskAllocationResponse, error)
	// Report task completion and outcomes
	ReportTaskOutcome(ctx context.Context, in *TaskOutcomeRequest, opts ...grpc.CallOption) (*TaskOutcomeResponse, error)
	// Get system overview
	GetSystemState(ctx context.Context, in *SystemStateRequest, opts ...grpc.CallOption) (*SystemStateResponse, error)
	// Control the RL agent (enable/disable learning, switch algorithms)
	ControlRLAgent(ctx context.Context, in *RLAgentControlRequest, opts ...grpc.CallOption) (*RLAgentControlResponse, error)
	// Get current status of the RL agent
	GetRLAgentStatus(ctx context.Context, in *RLAgentStatusRequest, opts ...grpc.CallOption) (*RLAgentStatusResponse, error)
	// Get performance metrics from the RL agent
	GetRLPerformanceMetrics(ctx context.Context, in *RLPerformanceRequest, opts ...grpc.CallOption) (*RLPerformanceResponse, error)
	// Set algorithm parameters for tuning
	SetRLParameters(ctx context.Context, in *RLParametersRequest, opts ...grpc.CallOption) (*RLParametersResponse, error)
}

type fogAllocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFogAllocationServiceClient(cc grpc.ClientConnInterface) FogAllocationServiceClient {
	return &fogAllocationServiceClient{cc}
}

func (c *fogAllocationServiceClient) ReportNodeState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[NodeStateRequest, NodeStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FogAllocationService_ServiceDesc.Streams[0], FogAllocationService_ReportNodeState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeStateRequest, NodeStateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FogAllocationService_ReportNodeStateClient = grpc.BidiStreamingClient[NodeStateRequest, NodeStateResponse]

func (c *fogAllocationServiceClient) AllocateTask(ctx context.Context, in *TaskAllocationRequest, opts ...grpc.CallOption) (*TaskAllocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAllocationResponse)
	err := c.cc.Invoke(ctx, FogAllocationService_AllocateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fogAllocationServiceClient) ReportTaskOutcome(ctx context.Context, in *TaskOutcomeRequest, opts ...grpc.CallOption) (*TaskOutcomeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskOutcomeResponse)
	err := c.cc.Invoke(ctx, FogAllocationService_ReportTaskOutcome_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fogAllocationServiceClient) GetSystemState(ctx context.Context, in *SystemStateRequest, opts ...grpc.CallOption) (*SystemStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemStateResponse)
	err := c.cc.Invoke(ctx, FogAllocationService_GetSystemState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fogAllocationServiceClient) ControlRLAgent(ctx context.Context, in *RLAgentControlRequest, opts ...grpc.CallOption) (*RLAgentControlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RLAgentControlResponse)
	err := c.cc.Invoke(ctx, FogAllocationService_ControlRLAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fogAllocationServiceClient) GetRLAgentStatus(ctx context.Context, in *RLAgentStatusRequest, opts ...grpc.CallOption) (*RLAgentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RLAgentStatusResponse)
	err := c.cc.Invoke(ctx, FogAllocationService_GetRLAgentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fogAllocationServiceClient) GetRLPerformanceMetrics(ctx context.Context, in *RLPerformanceRequest, opts ...grpc.CallOption) (*RLPerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RLPerformanceResponse)
	err := c.cc.Invoke(ctx, FogAllocationService_GetRLPerformanceMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fogAllocationServiceClient) SetRLParameters(ctx context.Context, in *RLParametersRequest, opts ...grpc.CallOption) (*RLParametersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RLParametersResponse)
	err := c.cc.Invoke(ctx, FogAllocationService_SetRLParameters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FogAllocationServiceServer is the server API for FogAllocationService service.
// All implementations must embed UnimplementedFogAllocationServiceServer
// for forward compatibility.
type FogAllocationServiceServer interface {
	// Stream-based state updates from clients
	ReportNodeState(grpc.BidiStreamingServer[NodeStateRequest, NodeStateResponse]) error
	// Request task allocation decision
	AllocateTask(context.Context, *TaskAllocationRequest) (*TaskAllocationResponse, error)
	// Report task completion and outcomes
	ReportTaskOutcome(context.Context, *TaskOutcomeRequest) (*TaskOutcomeResponse, error)
	// Get system overview
	GetSystemState(context.Context, *SystemStateRequest) (*SystemStateResponse, error)
	// Control the RL agent (enable/disable learning, switch algorithms)
	ControlRLAgent(context.Context, *RLAgentControlRequest) (*RLAgentControlResponse, error)
	// Get current status of the RL agent
	GetRLAgentStatus(context.Context, *RLAgentStatusRequest) (*RLAgentStatusResponse, error)
	// Get performance metrics from the RL agent
	GetRLPerformanceMetrics(context.Context, *RLPerformanceRequest) (*RLPerformanceResponse, error)
	// Set algorithm parameters for tuning
	SetRLParameters(context.Context, *RLParametersRequest) (*RLParametersResponse, error)
	mustEmbedUnimplementedFogAllocationServiceServer()
}

// UnimplementedFogAllocationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFogAllocationServiceServer struct{}

func (UnimplementedFogAllocationServiceServer) ReportNodeState(grpc.BidiStreamingServer[NodeStateRequest, NodeStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReportNodeState not implemented")
}
func (UnimplementedFogAllocationServiceServer) AllocateTask(context.Context, *TaskAllocationRequest) (*TaskAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateTask not implemented")
}
func (UnimplementedFogAllocationServiceServer) ReportTaskOutcome(context.Context, *TaskOutcomeRequest) (*TaskOutcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskOutcome not implemented")
}
func (UnimplementedFogAllocationServiceServer) GetSystemState(context.Context, *SystemStateRequest) (*SystemStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemState not implemented")
}
func (UnimplementedFogAllocationServiceServer) ControlRLAgent(context.Context, *RLAgentControlRequest) (*RLAgentControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlRLAgent not implemented")
}
func (UnimplementedFogAllocationServiceServer) GetRLAgentStatus(context.Context, *RLAgentStatusRequest) (*RLAgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRLAgentStatus not implemented")
}
func (UnimplementedFogAllocationServiceServer) GetRLPerformanceMetrics(context.Context, *RLPerformanceRequest) (*RLPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRLPerformanceMetrics not implemented")
}
func (UnimplementedFogAllocationServiceServer) SetRLParameters(context.Context, *RLParametersRequest) (*RLParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRLParameters not implemented")
}
func (UnimplementedFogAllocationServiceServer) mustEmbedUnimplementedFogAllocationServiceServer() {}
func (UnimplementedFogAllocationServiceServer) testEmbeddedByValue()                              {}

// UnsafeFogAllocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FogAllocationServiceServer will
// result in compilation errors.
type UnsafeFogAllocationServiceServer interface {
	mustEmbedUnimplementedFogAllocationServiceServer()
}

func RegisterFogAllocationServiceServer(s grpc.ServiceRegistrar, srv FogAllocationServiceServer) {
	// If the following call pancis, it indicates UnimplementedFogAllocationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FogAllocationService_ServiceDesc, srv)
}

func _FogAllocationService_ReportNodeState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FogAllocationServiceServer).ReportNodeState(&grpc.GenericServerStream[NodeStateRequest, NodeStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FogAllocationService_ReportNodeStateServer = grpc.BidiStreamingServer[NodeStateRequest, NodeStateResponse]

func _FogAllocationService_AllocateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FogAllocationServiceServer).AllocateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FogAllocationService_AllocateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FogAllocationServiceServer).AllocateTask(ctx, req.(*TaskAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FogAllocationService_ReportTaskOutcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskOutcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FogAllocationServiceServer).ReportTaskOutcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FogAllocationService_ReportTaskOutcome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FogAllocationServiceServer).ReportTaskOutcome(ctx, req.(*TaskOutcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FogAllocationService_GetSystemState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FogAllocationServiceServer).GetSystemState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FogAllocationService_GetSystemState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FogAllocationServiceServer).GetSystemState(ctx, req.(*SystemStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FogAllocationService_ControlRLAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RLAgentControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FogAllocationServiceServer).ControlRLAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FogAllocationService_ControlRLAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FogAllocationServiceServer).ControlRLAgent(ctx, req.(*RLAgentControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FogAllocationService_GetRLAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RLAgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FogAllocationServiceServer).GetRLAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FogAllocationService_GetRLAgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FogAllocationServiceServer).GetRLAgentStatus(ctx, req.(*RLAgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FogAllocationService_GetRLPerformanceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RLPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FogAllocationServiceServer).GetRLPerformanceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FogAllocationService_GetRLPerformanceMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FogAllocationServiceServer).GetRLPerformanceMetrics(ctx, req.(*RLPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FogAllocationService_SetRLParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RLParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FogAllocationServiceServer).SetRLParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FogAllocationService_SetRLParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FogAllocationServiceServer).SetRLParameters(ctx, req.(*RLParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FogAllocationService_ServiceDesc is the grpc.ServiceDesc for FogAllocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FogAllocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thesis.FogAllocationService",
	HandlerType: (*FogAllocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateTask",
			Handler:    _FogAllocationService_AllocateTask_Handler,
		},
		{
			MethodName: "ReportTaskOutcome",
			Handler:    _FogAllocationService_ReportTaskOutcome_Handler,
		},
		{
			MethodName: "GetSystemState",
			Handler:    _FogAllocationService_GetSystemState_Handler,
		},
		{
			MethodName: "ControlRLAgent",
			Handler:    _FogAllocationService_ControlRLAgent_Handler,
		},
		{
			MethodName: "GetRLAgentStatus",
			Handler:    _FogAllocationService_GetRLAgentStatus_Handler,
		},
		{
			MethodName: "GetRLPerformanceMetrics",
			Handler:    _FogAllocationService_GetRLPerformanceMetrics_Handler,
		},
		{
			MethodName: "SetRLParameters",
			Handler:    _FogAllocationService_SetRLParameters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportNodeState",
			Handler:       _FogAllocationService_ReportNodeState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/service.proto",
}
