// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/scheduler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskScheduler_AddTaskToQueue_FullMethodName          = "/thesis.TaskScheduler/AddTaskToQueue"
	TaskScheduler_GetSchedulingStatus_FullMethodName     = "/thesis.TaskScheduler/GetSchedulingStatus"
	TaskScheduler_HealthCheck_FullMethodName             = "/thesis.TaskScheduler/HealthCheck"
	TaskScheduler_UpdateObjectiveWeights_FullMethodName  = "/thesis.TaskScheduler/UpdateObjectiveWeights"
	TaskScheduler_ReportTaskCompletion_FullMethodName    = "/thesis.TaskScheduler/ReportTaskCompletion"
	TaskScheduler_GetSortedQueue_FullMethodName          = "/thesis.TaskScheduler/GetSortedQueue"
	TaskScheduler_SubscribeToQueueUpdates_FullMethodName = "/thesis.TaskScheduler/SubscribeToQueueUpdates"
)

// TaskSchedulerClient is the client API for TaskScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Task scheduling service
type TaskSchedulerClient interface {
	// Add task to queue for scheduling
	AddTaskToQueue(ctx context.Context, in *AddTaskToQueueRequest, opts ...grpc.CallOption) (*AddTaskToQueueResponse, error)
	// Get scheduling status
	GetSchedulingStatus(ctx context.Context, in *GetSchedulingStatusRequest, opts ...grpc.CallOption) (*GetSchedulingStatusResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Update objective weights for runtime configuration
	UpdateObjectiveWeights(ctx context.Context, in *UpdateObjectiveWeightsRequest, opts ...grpc.CallOption) (*UpdateObjectiveWeightsResponse, error)
	// Report task completion for delayed reward system
	ReportTaskCompletion(ctx context.Context, in *TaskCompletionReport, opts ...grpc.CallOption) (*TaskCompletionAck, error)
	// Get current sorted queue (single request)
	GetSortedQueue(ctx context.Context, in *GetSortedQueueRequest, opts ...grpc.CallOption) (*GetSortedQueueResponse, error)
	// Subscribe to queue updates (streaming)
	SubscribeToQueueUpdates(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueueUpdateResponse], error)
}

type taskSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskSchedulerClient(cc grpc.ClientConnInterface) TaskSchedulerClient {
	return &taskSchedulerClient{cc}
}

func (c *taskSchedulerClient) AddTaskToQueue(ctx context.Context, in *AddTaskToQueueRequest, opts ...grpc.CallOption) (*AddTaskToQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskToQueueResponse)
	err := c.cc.Invoke(ctx, TaskScheduler_AddTaskToQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSchedulerClient) GetSchedulingStatus(ctx context.Context, in *GetSchedulingStatusRequest, opts ...grpc.CallOption) (*GetSchedulingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchedulingStatusResponse)
	err := c.cc.Invoke(ctx, TaskScheduler_GetSchedulingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSchedulerClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, TaskScheduler_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSchedulerClient) UpdateObjectiveWeights(ctx context.Context, in *UpdateObjectiveWeightsRequest, opts ...grpc.CallOption) (*UpdateObjectiveWeightsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateObjectiveWeightsResponse)
	err := c.cc.Invoke(ctx, TaskScheduler_UpdateObjectiveWeights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSchedulerClient) ReportTaskCompletion(ctx context.Context, in *TaskCompletionReport, opts ...grpc.CallOption) (*TaskCompletionAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskCompletionAck)
	err := c.cc.Invoke(ctx, TaskScheduler_ReportTaskCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSchedulerClient) GetSortedQueue(ctx context.Context, in *GetSortedQueueRequest, opts ...grpc.CallOption) (*GetSortedQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSortedQueueResponse)
	err := c.cc.Invoke(ctx, TaskScheduler_GetSortedQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSchedulerClient) SubscribeToQueueUpdates(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueueUpdateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TaskScheduler_ServiceDesc.Streams[0], TaskScheduler_SubscribeToQueueUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, QueueUpdateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskScheduler_SubscribeToQueueUpdatesClient = grpc.ServerStreamingClient[QueueUpdateResponse]

// TaskSchedulerServer is the server API for TaskScheduler service.
// All implementations must embed UnimplementedTaskSchedulerServer
// for forward compatibility.
//
// Task scheduling service
type TaskSchedulerServer interface {
	// Add task to queue for scheduling
	AddTaskToQueue(context.Context, *AddTaskToQueueRequest) (*AddTaskToQueueResponse, error)
	// Get scheduling status
	GetSchedulingStatus(context.Context, *GetSchedulingStatusRequest) (*GetSchedulingStatusResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Update objective weights for runtime configuration
	UpdateObjectiveWeights(context.Context, *UpdateObjectiveWeightsRequest) (*UpdateObjectiveWeightsResponse, error)
	// Report task completion for delayed reward system
	ReportTaskCompletion(context.Context, *TaskCompletionReport) (*TaskCompletionAck, error)
	// Get current sorted queue (single request)
	GetSortedQueue(context.Context, *GetSortedQueueRequest) (*GetSortedQueueResponse, error)
	// Subscribe to queue updates (streaming)
	SubscribeToQueueUpdates(*SubscribeRequest, grpc.ServerStreamingServer[QueueUpdateResponse]) error
	mustEmbedUnimplementedTaskSchedulerServer()
}

// UnimplementedTaskSchedulerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskSchedulerServer struct{}

func (UnimplementedTaskSchedulerServer) AddTaskToQueue(context.Context, *AddTaskToQueueRequest) (*AddTaskToQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskToQueue not implemented")
}
func (UnimplementedTaskSchedulerServer) GetSchedulingStatus(context.Context, *GetSchedulingStatusRequest) (*GetSchedulingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulingStatus not implemented")
}
func (UnimplementedTaskSchedulerServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTaskSchedulerServer) UpdateObjectiveWeights(context.Context, *UpdateObjectiveWeightsRequest) (*UpdateObjectiveWeightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectiveWeights not implemented")
}
func (UnimplementedTaskSchedulerServer) ReportTaskCompletion(context.Context, *TaskCompletionReport) (*TaskCompletionAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskCompletion not implemented")
}
func (UnimplementedTaskSchedulerServer) GetSortedQueue(context.Context, *GetSortedQueueRequest) (*GetSortedQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSortedQueue not implemented")
}
func (UnimplementedTaskSchedulerServer) SubscribeToQueueUpdates(*SubscribeRequest, grpc.ServerStreamingServer[QueueUpdateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToQueueUpdates not implemented")
}
func (UnimplementedTaskSchedulerServer) mustEmbedUnimplementedTaskSchedulerServer() {}
func (UnimplementedTaskSchedulerServer) testEmbeddedByValue()                       {}

// UnsafeTaskSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskSchedulerServer will
// result in compilation errors.
type UnsafeTaskSchedulerServer interface {
	mustEmbedUnimplementedTaskSchedulerServer()
}

func RegisterTaskSchedulerServer(s grpc.ServiceRegistrar, srv TaskSchedulerServer) {
	// If the following call pancis, it indicates UnimplementedTaskSchedulerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskScheduler_ServiceDesc, srv)
}

func _TaskScheduler_AddTaskToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskToQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSchedulerServer).AddTaskToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskScheduler_AddTaskToQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSchedulerServer).AddTaskToQueue(ctx, req.(*AddTaskToQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskScheduler_GetSchedulingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSchedulerServer).GetSchedulingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskScheduler_GetSchedulingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSchedulerServer).GetSchedulingStatus(ctx, req.(*GetSchedulingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskScheduler_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSchedulerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskScheduler_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSchedulerServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskScheduler_UpdateObjectiveWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectiveWeightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSchedulerServer).UpdateObjectiveWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskScheduler_UpdateObjectiveWeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSchedulerServer).UpdateObjectiveWeights(ctx, req.(*UpdateObjectiveWeightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskScheduler_ReportTaskCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCompletionReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSchedulerServer).ReportTaskCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskScheduler_ReportTaskCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSchedulerServer).ReportTaskCompletion(ctx, req.(*TaskCompletionReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskScheduler_GetSortedQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSortedQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSchedulerServer).GetSortedQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskScheduler_GetSortedQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSchedulerServer).GetSortedQueue(ctx, req.(*GetSortedQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskScheduler_SubscribeToQueueUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskSchedulerServer).SubscribeToQueueUpdates(m, &grpc.GenericServerStream[SubscribeRequest, QueueUpdateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TaskScheduler_SubscribeToQueueUpdatesServer = grpc.ServerStreamingServer[QueueUpdateResponse]

// TaskScheduler_ServiceDesc is the grpc.ServiceDesc for TaskScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thesis.TaskScheduler",
	HandlerType: (*TaskSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTaskToQueue",
			Handler:    _TaskScheduler_AddTaskToQueue_Handler,
		},
		{
			MethodName: "GetSchedulingStatus",
			Handler:    _TaskScheduler_GetSchedulingStatus_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _TaskScheduler_HealthCheck_Handler,
		},
		{
			MethodName: "UpdateObjectiveWeights",
			Handler:    _TaskScheduler_UpdateObjectiveWeights_Handler,
		},
		{
			MethodName: "ReportTaskCompletion",
			Handler:    _TaskScheduler_ReportTaskCompletion_Handler,
		},
		{
			MethodName: "GetSortedQueue",
			Handler:    _TaskScheduler_GetSortedQueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToQueueUpdates",
			Handler:       _TaskScheduler_SubscribeToQueueUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/scheduler.proto",
}

const (
	SystemMonitoring_GetSystemMetrics_FullMethodName   = "/thesis.SystemMonitoring/GetSystemMetrics"
	SystemMonitoring_GetNodeRegistry_FullMethodName    = "/thesis.SystemMonitoring/GetNodeRegistry"
	SystemMonitoring_GetSchedulingStats_FullMethodName = "/thesis.SystemMonitoring/GetSchedulingStats"
	SystemMonitoring_GetDashboard_FullMethodName       = "/thesis.SystemMonitoring/GetDashboard"
)

// SystemMonitoringClient is the client API for SystemMonitoring service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// System monitoring service for practical monitoring aspects
type SystemMonitoringClient interface {
	// Get system metrics - perfect for presentations
	GetSystemMetrics(ctx context.Context, in *GetSystemMetricsRequest, opts ...grpc.CallOption) (*GetSystemMetricsResponse, error)
	// Get node registry status
	GetNodeRegistry(ctx context.Context, in *GetNodeRegistryRequest, opts ...grpc.CallOption) (*GetNodeRegistryResponse, error)
	// Get scheduling performance stats
	GetSchedulingStats(ctx context.Context, in *GetSchedulingStatsRequest, opts ...grpc.CallOption) (*GetSchedulingStatsResponse, error)
	// Get live dashboard data
	GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error)
}

type systemMonitoringClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemMonitoringClient(cc grpc.ClientConnInterface) SystemMonitoringClient {
	return &systemMonitoringClient{cc}
}

func (c *systemMonitoringClient) GetSystemMetrics(ctx context.Context, in *GetSystemMetricsRequest, opts ...grpc.CallOption) (*GetSystemMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemMetricsResponse)
	err := c.cc.Invoke(ctx, SystemMonitoring_GetSystemMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemMonitoringClient) GetNodeRegistry(ctx context.Context, in *GetNodeRegistryRequest, opts ...grpc.CallOption) (*GetNodeRegistryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeRegistryResponse)
	err := c.cc.Invoke(ctx, SystemMonitoring_GetNodeRegistry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemMonitoringClient) GetSchedulingStats(ctx context.Context, in *GetSchedulingStatsRequest, opts ...grpc.CallOption) (*GetSchedulingStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchedulingStatsResponse)
	err := c.cc.Invoke(ctx, SystemMonitoring_GetSchedulingStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemMonitoringClient) GetDashboard(ctx context.Context, in *GetDashboardRequest, opts ...grpc.CallOption) (*GetDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDashboardResponse)
	err := c.cc.Invoke(ctx, SystemMonitoring_GetDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemMonitoringServer is the server API for SystemMonitoring service.
// All implementations must embed UnimplementedSystemMonitoringServer
// for forward compatibility.
//
// System monitoring service for practical monitoring aspects
type SystemMonitoringServer interface {
	// Get system metrics - perfect for presentations
	GetSystemMetrics(context.Context, *GetSystemMetricsRequest) (*GetSystemMetricsResponse, error)
	// Get node registry status
	GetNodeRegistry(context.Context, *GetNodeRegistryRequest) (*GetNodeRegistryResponse, error)
	// Get scheduling performance stats
	GetSchedulingStats(context.Context, *GetSchedulingStatsRequest) (*GetSchedulingStatsResponse, error)
	// Get live dashboard data
	GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error)
	mustEmbedUnimplementedSystemMonitoringServer()
}

// UnimplementedSystemMonitoringServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemMonitoringServer struct{}

func (UnimplementedSystemMonitoringServer) GetSystemMetrics(context.Context, *GetSystemMetricsRequest) (*GetSystemMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemMetrics not implemented")
}
func (UnimplementedSystemMonitoringServer) GetNodeRegistry(context.Context, *GetNodeRegistryRequest) (*GetNodeRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeRegistry not implemented")
}
func (UnimplementedSystemMonitoringServer) GetSchedulingStats(context.Context, *GetSchedulingStatsRequest) (*GetSchedulingStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulingStats not implemented")
}
func (UnimplementedSystemMonitoringServer) GetDashboard(context.Context, *GetDashboardRequest) (*GetDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (UnimplementedSystemMonitoringServer) mustEmbedUnimplementedSystemMonitoringServer() {}
func (UnimplementedSystemMonitoringServer) testEmbeddedByValue()                          {}

// UnsafeSystemMonitoringServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemMonitoringServer will
// result in compilation errors.
type UnsafeSystemMonitoringServer interface {
	mustEmbedUnimplementedSystemMonitoringServer()
}

func RegisterSystemMonitoringServer(s grpc.ServiceRegistrar, srv SystemMonitoringServer) {
	// If the following call pancis, it indicates UnimplementedSystemMonitoringServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemMonitoring_ServiceDesc, srv)
}

func _SystemMonitoring_GetSystemMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMonitoringServer).GetSystemMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMonitoring_GetSystemMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMonitoringServer).GetSystemMetrics(ctx, req.(*GetSystemMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemMonitoring_GetNodeRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMonitoringServer).GetNodeRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMonitoring_GetNodeRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMonitoringServer).GetNodeRegistry(ctx, req.(*GetNodeRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemMonitoring_GetSchedulingStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulingStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMonitoringServer).GetSchedulingStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMonitoring_GetSchedulingStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMonitoringServer).GetSchedulingStats(ctx, req.(*GetSchedulingStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemMonitoring_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMonitoringServer).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMonitoring_GetDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMonitoringServer).GetDashboard(ctx, req.(*GetDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemMonitoring_ServiceDesc is the grpc.ServiceDesc for SystemMonitoring service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemMonitoring_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thesis.SystemMonitoring",
	HandlerType: (*SystemMonitoringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemMetrics",
			Handler:    _SystemMonitoring_GetSystemMetrics_Handler,
		},
		{
			MethodName: "GetNodeRegistry",
			Handler:    _SystemMonitoring_GetNodeRegistry_Handler,
		},
		{
			MethodName: "GetSchedulingStats",
			Handler:    _SystemMonitoring_GetSchedulingStats_Handler,
		},
		{
			MethodName: "GetDashboard",
			Handler:    _SystemMonitoring_GetDashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/scheduler.proto",
}
